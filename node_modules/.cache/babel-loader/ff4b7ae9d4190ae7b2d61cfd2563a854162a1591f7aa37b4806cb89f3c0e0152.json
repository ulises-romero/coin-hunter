{"ast":null,"code":"//!Defines the commands used in cli.\n\n/*\r\n * c\r\n * https://github.com/rumpl/c\r\n *\r\n * Copyright (c) 2012 Djordje Lukic\r\n * Licensed under the MIT license.\r\n */\n\n\"use strict\";\n\n// Dependencies\nconst pack = require(\"../package.json\");\nconst helpers = require(\"./helpers\");\nconst storage = require(\"./storage\");\nconst path = require(\"path\");\nconst colors = require(\"colors/safe\");\nconst {\n  trueCasePathSync\n} = require(\"true-case-path\");\nconst commands = module.exports;\n\n//TODO: refactor list & filteredList into one function - they're almost identical for the most part\n\n/**Lists all `.comment` files available within `.comments`.\r\n * @param {string} relativePathToTarget The relative path from the\r\n * current directory to the target directory.\r\n * @return {number} error code.\r\n */\ncommands.list = function (relativePathToTarget) {\n  //Checks if the path is invalid OR a directory - returns if so.\n  if (!storage.ifPathIsValidAndNotFile(relativePathToTarget)) {\n    console.error(\"Please specify a valid directory.\");\n    return 1;\n  }\n  let comments, filesNames;\n\n  //If there is not a '.comments', pass in an empty array\n  if (storage.commentsFolderExists(relativePathToTarget)) {\n    comments = storage.loadComments(relativePathToTarget);\n    filesNames = storage.loadFiles(relativePathToTarget);\n  } else {\n    comments = [];\n    filesNames = storage.loadFiles(relativePathToTarget);\n  }\n\n  /*If the current directory has no comment for itself, \r\n    look for one in the parent directory.*/\n  if (!comments[\".\"]) {\n    comments[\".\"] = storage.returnCurrentDirectoryParentComment(relativePathToTarget);\n  }\n\n  /*If the current directory has no comment for it's parent,\r\n  look for one in the grandparent directory.*/\n  if (!comments[\"..\"]) {\n    comments[\"..\"] = storage.returnCurrentDirectoryGrandparentComment(relativePathToTarget);\n  }\n\n  //Prints the files and their comments.\n  helpers.printFileComments(filesNames, comments, relativePathToTarget);\n  return 0;\n};\n\n/**Lists only files with related `.comment` files.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to list the contents of `.comments` directory.\r\n * @return {number} error code.\r\n */\ncommands.filteredList = function (relativePathToTarget) {\n  if (!storage.ifPathIsValidAndNotFile(relativePathToTarget)) {\n    console.error(\"Please specify a valid directory.\");\n    return 1;\n  }\n  let comments, fileNames;\n  if (!storage.commentsFolderExists(relativePathToTarget)) {\n    comments = [];\n    fileNames = storage.loadFiles(relativePathToTarget);\n  } else {\n    fileNames = storage.loadFiles(relativePathToTarget);\n    comments = storage.loadComments(relativePathToTarget);\n  }\n\n  /*If the current directory has no comment for itself, \r\n    look for one in the parent directory.*/\n  if (!comments[\".\"]) {\n    comments[\".\"] = storage.returnCurrentDirectoryParentComment(relativePathToTarget);\n  }\n\n  /*If the current directory has no comment for it's parent,\r\n  look for one in the grandparent directory.*/\n  if (!comments[\"..\"]) {\n    comments[\"..\"] = storage.returnCurrentDirectoryGrandparentComment(relativePathToTarget);\n  }\n  helpers.printOnlyComments(fileNames, comments, relativePathToTarget);\n  return 0;\n};\n\n/**Adds a comment to a file or directory.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to set a relevant `.comment`.\r\n * @param {string} comment The comment to be written.\r\n * @return {number} error code.\r\n */\ncommands.set = function (relativePathToTarget, comment) {\n  //Checks if the file is invalid\n  if (!storage.ifPathIsValid(relativePathToTarget)) {\n    console.error(\"Please specify a valid directory or file.\");\n    return 1;\n  }\n  const targetDirectoryAbsolutePathCaseCorrect = trueCasePathSync(path.join(path.resolve(\"./\"), relativePathToTarget));\n\n  //If setting the comment file fails, log failure\n  if (!storage.setCommentFile(targetDirectoryAbsolutePathCaseCorrect, comment)) {\n    console.log(`\"${colors.cyan(comment)}\" was applied to \"${colors.cyan(relativePathToTarget)}\" successfully.`);\n    return 0;\n  } else {\n    console.log(`There was an error writing the comment. Try again.`);\n    return 1;\n  }\n};\n\n/**Removes a comment from a file.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to delete a relevant `.comment`.\r\n * @return {number} error code.\r\n */\ncommands.delete = function (relativePathToTarget) {\n  if (!storage.ifPathIsValid(relativePathToTarget)) {\n    console.error(`${colors.cyan(relativePathToTarget)} is invalid, please specify a valid file or directory.`);\n    return 1;\n  }\n  const absolutePathToTarget = path.resolve(path.join(\"./\", relativePathToTarget));\n  if (storage.delete(absolutePathToTarget)) {\n    console.log(`No comment to be deleted for ${colors.cyan(relativePathToTarget)}.`);\n    return 1;\n  } else {\n    console.log(`${colors.cyan(relativePathToTarget)}'s comment was deleted successfully.`);\n    return 0;\n  }\n};\n\n/**Lists helper information.\r\n * @return {number} error code 0.\r\n */\ncommands.help = function () {\n  console.log(`Usage: c [-l  | --list <DIRECTORY|FILE>]\n         [-rm | --remove <DIRECTORY|FILE>]\n         [-s  | --set <DIRECTORY|FILE> <COMMENT>]\n         [-h  | --help]\n         [-v  | --version]\n\nOptions:\n  list    | -l     Lists all the comments for the specified directory.\n  set     | -s     Sets or overwrites a new comment for the file|directory.\n  remove  | -rm    Deletes the comment for the file|directory.\n  help    | -h     Shows the help menu.\n  version | -v     States the version.\\n`);\n  return 0;\n};\n\n/**Lists the current version.\r\n * @return {number} error code 0.\r\n */\ncommands.version = function () {\n  console.log(\"v\" + pack.version);\n  return 0;\n};","map":{"version":3,"names":["pack","require","helpers","storage","path","colors","trueCasePathSync","commands","module","exports","list","relativePathToTarget","ifPathIsValidAndNotFile","console","error","comments","filesNames","commentsFolderExists","loadComments","loadFiles","returnCurrentDirectoryParentComment","returnCurrentDirectoryGrandparentComment","printFileComments","filteredList","fileNames","printOnlyComments","set","comment","ifPathIsValid","targetDirectoryAbsolutePathCaseCorrect","join","resolve","setCommentFile","log","cyan","delete","absolutePathToTarget","help","version"],"sources":["/Users/dannyromero/Development/Web Applications/crypto-tracker/node_modules/c/src/commands.js"],"sourcesContent":["//!Defines the commands used in cli.\r\n\r\n/*\r\n * c\r\n * https://github.com/rumpl/c\r\n *\r\n * Copyright (c) 2012 Djordje Lukic\r\n * Licensed under the MIT license.\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Dependencies\r\nconst pack = require(\"../package.json\");\r\nconst helpers = require(\"./helpers\");\r\nconst storage = require(\"./storage\");\r\nconst path = require(\"path\");\r\nconst colors = require(\"colors/safe\");\r\nconst { trueCasePathSync } = require(\"true-case-path\");\r\n\r\nconst commands = module.exports;\r\n\r\n//TODO: refactor list & filteredList into one function - they're almost identical for the most part\r\n\r\n/**Lists all `.comment` files available within `.comments`.\r\n * @param {string} relativePathToTarget The relative path from the\r\n * current directory to the target directory.\r\n * @return {number} error code.\r\n */\r\ncommands.list = function (relativePathToTarget) {\r\n  //Checks if the path is invalid OR a directory - returns if so.\r\n  if (!storage.ifPathIsValidAndNotFile(relativePathToTarget)) {\r\n    console.error(\"Please specify a valid directory.\");\r\n    return 1;\r\n  }\r\n\r\n  let comments, filesNames;\r\n\r\n  //If there is not a '.comments', pass in an empty array\r\n  if (storage.commentsFolderExists(relativePathToTarget)) {\r\n    comments = storage.loadComments(relativePathToTarget);\r\n    filesNames = storage.loadFiles(relativePathToTarget);\r\n  } else {\r\n    comments = [];\r\n    filesNames = storage.loadFiles(relativePathToTarget);\r\n  }\r\n\r\n  /*If the current directory has no comment for itself, \r\n    look for one in the parent directory.*/\r\n  if (!comments[\".\"]) {\r\n    comments[\".\"] = storage.returnCurrentDirectoryParentComment(\r\n      relativePathToTarget\r\n    );\r\n  }\r\n\r\n  /*If the current directory has no comment for it's parent,\r\n  look for one in the grandparent directory.*/\r\n  if (!comments[\"..\"]) {\r\n    comments[\"..\"] = storage.returnCurrentDirectoryGrandparentComment(\r\n      relativePathToTarget\r\n    );\r\n  }\r\n\r\n  //Prints the files and their comments.\r\n  helpers.printFileComments(filesNames, comments, relativePathToTarget);\r\n\r\n  return 0;\r\n};\r\n\r\n/**Lists only files with related `.comment` files.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to list the contents of `.comments` directory.\r\n * @return {number} error code.\r\n */\r\ncommands.filteredList = function (relativePathToTarget) {\r\n  if (!storage.ifPathIsValidAndNotFile(relativePathToTarget)) {\r\n    console.error(\"Please specify a valid directory.\");\r\n    return 1;\r\n  }\r\n\r\n  let comments, fileNames;\r\n\r\n  if (!storage.commentsFolderExists(relativePathToTarget)) {\r\n    comments = [];\r\n    fileNames = storage.loadFiles(relativePathToTarget);\r\n  } else {\r\n    fileNames = storage.loadFiles(relativePathToTarget);\r\n    comments = storage.loadComments(relativePathToTarget);\r\n  }\r\n\r\n  /*If the current directory has no comment for itself, \r\n    look for one in the parent directory.*/\r\n  if (!comments[\".\"]) {\r\n    comments[\".\"] = storage.returnCurrentDirectoryParentComment(\r\n      relativePathToTarget\r\n    );\r\n  }\r\n\r\n  /*If the current directory has no comment for it's parent,\r\n  look for one in the grandparent directory.*/\r\n  if (!comments[\"..\"]) {\r\n    comments[\"..\"] = storage.returnCurrentDirectoryGrandparentComment(\r\n      relativePathToTarget\r\n    );\r\n  }\r\n\r\n  helpers.printOnlyComments(fileNames, comments, relativePathToTarget);\r\n\r\n  return 0;\r\n};\r\n\r\n/**Adds a comment to a file or directory.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to set a relevant `.comment`.\r\n * @param {string} comment The comment to be written.\r\n * @return {number} error code.\r\n */\r\ncommands.set = function (relativePathToTarget, comment) {\r\n  //Checks if the file is invalid\r\n  if (!storage.ifPathIsValid(relativePathToTarget)) {\r\n    console.error(\"Please specify a valid directory or file.\");\r\n    return 1;\r\n  }\r\n\r\n  const targetDirectoryAbsolutePathCaseCorrect = trueCasePathSync(\r\n    path.join(path.resolve(\"./\"), relativePathToTarget)\r\n  );\r\n\r\n  //If setting the comment file fails, log failure\r\n  if (\r\n    !storage.setCommentFile(targetDirectoryAbsolutePathCaseCorrect, comment)\r\n  ) {\r\n    console.log(\r\n      `\"${colors.cyan(comment)}\" was applied to \"${colors.cyan(\r\n        relativePathToTarget\r\n      )}\" successfully.`\r\n    );\r\n    return 0;\r\n  } else {\r\n    console.log(`There was an error writing the comment. Try again.`);\r\n    return 1;\r\n  }\r\n};\r\n\r\n/**Removes a comment from a file.\r\n * @param {string} relativePathToTarget The relative path of the\r\n * node to delete a relevant `.comment`.\r\n * @return {number} error code.\r\n */\r\ncommands.delete = function (relativePathToTarget) {\r\n  if (!storage.ifPathIsValid(relativePathToTarget)) {\r\n    console.error(\r\n      `${colors.cyan(\r\n        relativePathToTarget\r\n      )} is invalid, please specify a valid file or directory.`\r\n    );\r\n    return 1;\r\n  }\r\n\r\n  const absolutePathToTarget = path.resolve(\r\n    path.join(\"./\", relativePathToTarget)\r\n  );\r\n\r\n  if (storage.delete(absolutePathToTarget)) {\r\n    console.log(\r\n      `No comment to be deleted for ${colors.cyan(relativePathToTarget)}.`\r\n    );\r\n    return 1;\r\n  } else {\r\n    console.log(\r\n      `${colors.cyan(relativePathToTarget)}'s comment was deleted successfully.`\r\n    );\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**Lists helper information.\r\n * @return {number} error code 0.\r\n */\r\ncommands.help = function () {\r\n  console.log(`Usage: c [-l  | --list <DIRECTORY|FILE>]\r\n         [-rm | --remove <DIRECTORY|FILE>]\r\n         [-s  | --set <DIRECTORY|FILE> <COMMENT>]\r\n         [-h  | --help]\r\n         [-v  | --version]\r\n\r\nOptions:\r\n  list    | -l     Lists all the comments for the specified directory.\r\n  set     | -s     Sets or overwrites a new comment for the file|directory.\r\n  remove  | -rm    Deletes the comment for the file|directory.\r\n  help    | -h     Shows the help menu.\r\n  version | -v     States the version.\\n`);\r\n  return 0;\r\n};\r\n\r\n/**Lists the current version.\r\n * @return {number} error code 0.\r\n */\r\ncommands.version = function () {\r\n  console.log(\"v\" + pack.version);\r\n  return 0;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}