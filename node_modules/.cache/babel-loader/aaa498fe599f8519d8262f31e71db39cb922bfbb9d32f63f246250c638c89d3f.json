{"ast":null,"code":"#!/usr/bin/env node\n\n/**\r\n * c\r\n * https://github.com/rumpl/c\r\n *\r\n * Copyright (c) 2012 Djordje Lukic\r\n * Licensed under the MIT license.\r\n */\n\"use strict\";\n\nconst commandFunctions = require(\"./commands\");\nconst colors = require(\"colors/safe\");\nconst [,, ...arg] = process.argv; //Gets command line arguments\n\n/** Creates objects - commands - which can be called from the command line. */\nclass Command {\n  /**\r\n   * @param {string} shortFlag a short-form identifier for a command,\r\n   * beginning with '-'.\r\n   * @param {string} action a long-form identifier for a command.\r\n   * @param {number} argCount the number of arguments the command takes.\r\n   * @param {{ (): void; }} method the function, from the file `commands.js`,\r\n   * which executes this commands main logic.\r\n   * @param {{ (): void; (): never;  }} fallback a fallback function which is\r\n   * used if the number of arguments is equal to argCount - 1.\r\n   */\n  constructor(shortFlag, action, argCount, method, fallback) {\n    /** @property {string} shortFlag a short-form identifier for a command,\r\n     * beginning with '-'. */\n    this.shortFlag = shortFlag;\n\n    /** @property {string} action a long-form identifier for a command. */\n    this.action = action;\n\n    /** @property {number} argCount the number\r\n     * of arguments the command takes.*/\n    this.argCount = argCount;\n\n    /** @property {{ (): void; }} method the function, from the file\r\n     * `commands.js`, which executes this commands main logic. */\n    this.method = method;\n\n    /** @property {{ (): void; (): never;  }} fallback a fallback function\r\n     * which is used if the number of arguments is equal to argCount - 1. */\n    this.fallback = fallback;\n  }\n}\n\n/**An array storing all command objects.*/\nconst commands = [new Command(\n//Help command\n\"-h\", \"help\", 1, () => {\n  commandFunctions.help();\n  process.exit(0);\n}, () => {\n  error();\n  process.exit(1);\n}), new Command(\n//list command\n\"-l\", \"list\", 2, () => {\n  commandFunctions.list(arg[1]);\n  process.exit(0);\n}, () => {\n  commandFunctions.list(\".\");\n  process.exit(0);\n}), new Command(\n//remove command\n\"-rm\", \"remove\", 2, () => {\n  commandFunctions.delete(arg[1]);\n  process.exit(0);\n}, () => {\n  error();\n  process.exit(1);\n}), new Command(\n//set command\n\"-s\", \"set\", 3, () => {\n  commandFunctions.set(arg[1], arg[2]);\n  process.exit(0);\n}, () => {\n  error();\n  process.exit(1);\n}), new Command(\n//Version command\n\"-v\", \"version\", 1, () => {\n  commandFunctions.version();\n  process.exit(0);\n}, () => {\n  error();\n  process.exit(1);\n})];\n\n/*Loops through each element of `commands` to \r\nfind what command was provided at the command line*/\nfor (const command of commands) {\n  if (arg[0] == command.action || arg[0] == command.shortFlag) {\n    switch (arg.length) {\n      case command.argCount:\n        //The number of arguments specified\n        command.method();\n        break;\n      case command.argCount - 1:\n        //The number of arguments specified -1\n        command.fallback();\n        break;\n      default:\n        error();\n    }\n  }\n}\nerror();\n\n/**Called if the provided command fails.\r\n * @returns {number} error code 1.\r\n */\nfunction error() {\n  console.error(colors.red(\"\\nInvalid flag, please try the following:\\n\"));\n  //Show how to use `c`\n  commandFunctions.help();\n  return 1;\n}","map":{"version":3,"names":["commandFunctions","require","colors","arg","process","argv","Command","constructor","shortFlag","action","argCount","method","fallback","commands","help","exit","error","list","delete","set","version","command","length","console","red"],"sources":["/Users/dannyromero/Development/Web Applications/crypto-tracker/node_modules/c/src/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\r\n/**\r\n * c\r\n * https://github.com/rumpl/c\r\n *\r\n * Copyright (c) 2012 Djordje Lukic\r\n * Licensed under the MIT license.\r\n */\r\n\r\n\"use strict\";\r\nconst commandFunctions = require(\"./commands\");\r\nconst colors = require(\"colors/safe\");\r\n\r\nconst [, , ...arg] = process.argv; //Gets command line arguments\r\n\r\n/** Creates objects - commands - which can be called from the command line. */\r\nclass Command {\r\n  /**\r\n   * @param {string} shortFlag a short-form identifier for a command,\r\n   * beginning with '-'.\r\n   * @param {string} action a long-form identifier for a command.\r\n   * @param {number} argCount the number of arguments the command takes.\r\n   * @param {{ (): void; }} method the function, from the file `commands.js`,\r\n   * which executes this commands main logic.\r\n   * @param {{ (): void; (): never;  }} fallback a fallback function which is\r\n   * used if the number of arguments is equal to argCount - 1.\r\n   */\r\n  constructor(shortFlag, action, argCount, method, fallback) {\r\n    /** @property {string} shortFlag a short-form identifier for a command,\r\n     * beginning with '-'. */\r\n    this.shortFlag = shortFlag;\r\n\r\n    /** @property {string} action a long-form identifier for a command. */\r\n    this.action = action;\r\n\r\n    /** @property {number} argCount the number\r\n     * of arguments the command takes.*/\r\n    this.argCount = argCount;\r\n\r\n    /** @property {{ (): void; }} method the function, from the file\r\n     * `commands.js`, which executes this commands main logic. */\r\n    this.method = method;\r\n\r\n    /** @property {{ (): void; (): never;  }} fallback a fallback function\r\n     * which is used if the number of arguments is equal to argCount - 1. */\r\n    this.fallback = fallback;\r\n  }\r\n}\r\n\r\n/**An array storing all command objects.*/\r\nconst commands = [\r\n  new Command( //Help command\r\n    \"-h\",\r\n    \"help\",\r\n    1,\r\n    () => {\r\n      commandFunctions.help();\r\n      process.exit(0);\r\n    },\r\n    () => {\r\n      error();\r\n      process.exit(1);\r\n    }\r\n  ),\r\n\r\n  new Command( //list command\r\n    \"-l\",\r\n    \"list\",\r\n    2,\r\n    () => {\r\n      commandFunctions.list(arg[1]);\r\n      process.exit(0);\r\n    },\r\n    () => {\r\n      commandFunctions.list(\".\");\r\n      process.exit(0);\r\n    }\r\n  ),\r\n\r\n  new Command( //remove command\r\n    \"-rm\",\r\n    \"remove\",\r\n    2,\r\n    () => {\r\n      commandFunctions.delete(arg[1]);\r\n      process.exit(0);\r\n    },\r\n    () => {\r\n      error();\r\n      process.exit(1);\r\n    }\r\n  ),\r\n\r\n  new Command( //set command\r\n    \"-s\",\r\n    \"set\",\r\n    3,\r\n    () => {\r\n      commandFunctions.set(arg[1], arg[2]);\r\n      process.exit(0);\r\n    },\r\n    () => {\r\n      error();\r\n      process.exit(1);\r\n    }\r\n  ),\r\n\r\n  new Command( //Version command\r\n    \"-v\",\r\n    \"version\",\r\n    1,\r\n    () => {\r\n      commandFunctions.version();\r\n      process.exit(0);\r\n    },\r\n    () => {\r\n      error();\r\n      process.exit(1);\r\n    }\r\n  ),\r\n];\r\n\r\n/*Loops through each element of `commands` to \r\nfind what command was provided at the command line*/\r\nfor (const command of commands) {\r\n  if (arg[0] == command.action || arg[0] == command.shortFlag) {\r\n    switch (arg.length) {\r\n      case command.argCount: //The number of arguments specified\r\n        command.method();\r\n        break;\r\n\r\n      case command.argCount - 1: //The number of arguments specified -1\r\n        command.fallback();\r\n        break;\r\n\r\n      default:\r\n        error();\r\n    }\r\n  }\r\n}\r\n\r\nerror();\r\n\r\n/**Called if the provided command fails.\r\n * @returns {number} error code 1.\r\n */\r\nfunction error() {\r\n  console.error(colors.red(\"\\nInvalid flag, please try the following:\\n\"));\r\n  //Show how to use `c`\r\n  commandFunctions.help();\r\n\r\n  return 1;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}